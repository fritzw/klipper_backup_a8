[include mainsail.cfg]

# This file contains common pin mappings for Anet A8 printer from 2016
# and 2017. To use this config, the firmware should be compiled for
# the AVR atmega1284p.

# Note that the "make flash" command does not work with Anet boards -
# the boards are typically flashed with this command:
#  avrdude -p atmega1284p -c arduino -b 57600 -P /dev/ttyUSB0 -U out/klipper.elf                                                                       .hex

# See the example.cfg file for a description of available parameters.

# [bed_mesh]
# speed: 300
# horizontal_move_z: 5.5
# mesh_min: 10,10
# mesh_max: 210,210
# #mesh_max: 205,170
# probe_count: 5,5

[bed_mesh]
speed: 300
horizontal_move_z: 3
mesh_min: 10,10
mesh_max: 210,210
#mesh_max: 205,170
probe_count: 5,5
split_delta_z: .01
algorithm: bicubic
bicubic_tension: .5
zero_reference_position: 110,110
mesh_pps: 3, 3

[bed_screws]
screw1: 5,5
screw2: 5,215
screw3: 215,215
screw4: 215,5

# [bltouch]
# sensor_pin: ^gpio22
# control_pin: gpio29
# x_offset: -28  ## ALSO UPDATE [safe_z_home].home_xy_position
# y_offset: 22  ## ALSO UPDATE [safe_z_home].home_xy_position
# z_offset = 0.965
# speed: 2
# lift_speed: 20
# stow_on_each_sample: false
# #SPEED=0.5: PROBE_ACCURACY at X:130.000 Y:116.000 Z:5.007 (samples=10 retract=2.000 speed=0.5 lift_speed=20.0): probe accuracy results: maximum 3.012500, minimum 3.005000, range 0.007500, average 3.009250, median 3.010000, standard deviation 0.002250
# #SPEED=1: PROBE_ACCURACY at X:130.000 Y:116.000 Z:10.000 (samples=20 retract=2.000 speed=1.0 lift_speed=20.0): probe accuracy results: maximum 3.032500, minimum 3.027500, range 0.005000, average 3.029500, median 3.030000, standard deviation 0.001500
# #SPEED=2: PROBE_ACCURACY at X:130.000 Y:116.000 Z:5.027 (samples=20 retract=2.000 speed=2.0 lift_speed=20.0): probe accuracy results: maximum 3.015000, minimum 3.010000, range 0.005000, average 3.013250, median 3.012500, standard deviation 0.001601
# #SPEED=4: PROBE_ACCURACY at X:130.000 Y:116.000 Z:5.010 (samples=20 retract=2.000 speed=4.0 lift_speed=20.0): probe accuracy results: maximum 3.007500, minimum 3.000000, range 0.007500, average 3.002875, median 3.002500, standard deviation 0.001816
# #SPEED=8: PROBE_ACCURACY at X:130.000 Y:116.000 Z:5.002 (samples=20 retract=2.000 speed=8.0 lift_speed=20.0): probe accuracy results: maximum 2.990000, minimum 2.982500, range 0.007500, average 2.985500, median 2.985000, standard deviation 0.002031
# [gcode_macro PROBE_DEPLOY]
# gcode:
#     BLTOUCH_DEBUG COMMAND=pin_down
# [gcode_macro PROBE_STOW]
# gcode:
#     BLTOUCH_DEBUG COMMAND=pin_up

[probe]
pin: ^!gpio22
deactivate_on_each_sample: False
x_offset: -22  ## ALSO UPDATE [safe_z_home].home_xy_position
y_offset: 0.5  ## ALSO UPDATE [safe_z_home].home_xy_position
#z_offset: 0.945 # Actual offset of the MicroProbe installation
speed: 5.0
activate_gcode:
    PROBE_DEPLOY
    G4 P500 # Allow 500 milliseconds for the probe to deploy
deactivate_gcode:
    PROBE_STOW

[output_pin probe_enable]
pin: gpio29
value: 0

[gcode_macro PROBE_DEPLOY]
gcode:
    SET_PIN PIN=probe_enable VALUE=1
[gcode_macro PROBE_STOW]
gcode:
    SET_PIN PIN=probe_enable VALUE=0

[safe_z_home]
home_xy_position: 132,109.5 # Bed Center, including BLTouch offset
speed: 50
z_hop: 5                 # Move up 10mm
z_hop_speed: 5

[firmware_retraction]
retract_length: 0.5
retract_speed: 60
unretract_extra_length: 0
unretract_speed: 60

[gcode_arcs]
resolution: 0.5
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

[input_shaper]
shaper_freq_x: 28.8  # frequency for the X mark of the test model
shaper_freq_y: 27.2  # frequency for the Y mark of the test model

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

[pause_resume]
recover_velocity: 275

[endstop_phase]

[exclude_object]

[respond] # Allow printing messages on the console

######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.
[dynamicmacros]
configs: dynamic_macros.cfg

[gcode_macro FILAMENT_SENSOR_DEACTIVATE]
variable_filament_present_active: 1
variable_filament_moving_active: 1
gcode:
    {% set ACTIVE = params.active|default(0) %}
    SET_GCODE_VARIABLE MACRO=FILAMENT_SENSOR_DEACTIVATE VARIABLE=filament_present_active VALUE={ACTIVE}
    SET_GCODE_VARIABLE MACRO=FILAMENT_SENSOR_DEACTIVATE VARIABLE=filament_moving_active VALUE={ACTIVE}

[gcode_macro FILAMENT_SENSOR_ACTIVATE]
gcode:
    FILAMENT_SENSOR_DEACTIVATE ACTIVE=1

[delayed_gcode _INIT_PRINTER]
initial_duration: 0.2
gcode:
    SAVE_GCODE_STATE 
    FILAMENT_SENSOR_ACTIVATE

[gcode_macro START_PRINT]
gcode:
    #{% set NOZZLE = params.NOZZLE|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set MAX_FLOW_MM_PER_S = params.MAX_FLOW|default(5)|float %}
    {% set MAX_FLOW_MM_PER_S = [ MAX_FLOW_MM_PER_S, 10 ] | min %} # Limit max flow rate to avoid grinding when the slicer outputs 200 for "max flow" tests.
    RESTORE_MOTION_SETTINGS
    SET_FILAMENT_SENSOR SENSOR=filament_present ENABLE=0   ; disable filament sensor
    SET_FILAMENT_SENSOR SENSOR=filament_moving ENABLE=0    ; disable filament sensor
    SET_PRESSURE_ADVANCE ADVANCE=0.015 SMOOTH_TIME=0.004
    SET_RETRACTION RETRACT_LENGTH=1 RETRACT_SPEED=30
    CLEAR_PAUSE
    M83  ; extruder relative mode
    M104 S180 ; preheat extruder for filament change
    M140 S{BED_TEMP} ; set actual bed 
    G28 ; Home first to check tilt
    G1 Z20 F4000
    G1 X-15 F15000
    MESSAGE TEXT="Waiting for bed"
    ;M190 S{BED_TEMP} ; wait for bed temp
    TEMPERATURE_WAIT  SENSOR=bed MINIMUM={BED_TEMP-1} MAXIMUM={BED_TEMP+5} ; wait for bed temp
    M104 S140 ; cool extruder to prevent dripping
    G4 P1000
    MESSAGE TEXT="Heat soaking: 1 minute"
    G4 P60000
    G28 ; home all without mesh bed level
    Z_TILT_ALIGN_IF_NECESSARY ; Check X axis tilt and fix if necessary
    _START_PRINT_PRIME_NOZZLE BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} MAX_FLOW={MAX_FLOW_MM_PER_S}
  
[gcode_macro _START_PRINT_PRIME_NOZZLE]
gcode:
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    {% set MAX_FLOW_MM_PER_S = params.MAX_FLOW|float %}
    {% set tilt_okay = printer["gcode_macro Z_TILT_CALCULATE"].tilt_okay|int %}
    {% if tilt_okay == 1 %}
    BED_MESH_CALIBRATE ADAPTIVE=1
    M104 S{EXTRUDER_TEMP} ; set actual extruder temp
    PROBE_ENSURE_STOWED  ; Make sure that the probe is retracted after probing. This failed once.
    
    ; PRIME NOZZLE ON BED HANDLE
    G1 Z10 ; Travel Height
    G1 Y-7 ; Move bed handle below nozzle
    G1 X70 ; Left edge of handle
    G1 Z0.0 ; Touch nozzle to bed to prevent oozing
    M109 S{EXTRUDER_TEMP} ; wait for extruder temp
    G1 Z0.5 ; Move nozzle to prime height
    {% set PRIME_HEIGHT = 0.4 %}
    ; Restore state of filament sensors to how it was before, to enable printing without sensors
    SET_FILAMENT_SENSOR SENSOR=filament_present ENABLE={printer["gcode_macro FILAMENT_SENSOR_DEACTIVATE"].filament_present_active}
    SET_FILAMENT_SENSOR SENSOR=filament_moving ENABLE={printer["gcode_macro FILAMENT_SENSOR_DEACTIVATE"].filament_moving_active}
    M109 S{EXTRUDER_TEMP} ; wait for extruder temp
    PRINT_LINE X=80 THICKNESS={PRIME_HEIGHT} WIDTH=3 FLOW={MAX_FLOW_MM_PER_S} ; Very fat line segment to prime nozzle
    PRINT_LINE X=150 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE Y=-6 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE X=80 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE Y=-5 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE X=150 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE Y=-4 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE X=80 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    PRINT_LINE Y=-3 THICKNESS={PRIME_HEIGHT} WIDTH=1.05 FLOW={MAX_FLOW_MM_PER_S/2}
    G1 Z{PRIME_HEIGHT+0.3}
    PRINT_LINE Y=-6 THICKNESS=0.3 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    PRINT_LINE X=83 THICKNESS=0.3 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    PRINT_LINE Y=-3 THICKNESS=0.3 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    PRINT_LINE X=80 THICKNESS=0.3 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    G1 Z{PRIME_HEIGHT+0.3+0.2}
    PRINT_LINE Y=-6 THICKNESS=0.2 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    PRINT_LINE X=83 THICKNESS=0.2 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    PRINT_LINE Y=-3 THICKNESS=0.2 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    PRINT_LINE X=80 THICKNESS=0.2 WIDTH=0.8 FLOW={MAX_FLOW_MM_PER_S/4}
    G0 Y0
    M117 ; Clear message
    G1 F20000
    {% endif %}
    

[gcode_macro END_PRINT]
gcode:
    G4 # Wait until movement is complete
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    M221 S100 # Reset Flow percentage
    # Move nozzle away from print while retracting
    G91
    G1 E-0.3 F2000
    G1 X-2 Y-2 Z0.1 E-3 F10000
    G90
    G0 X-20 Y220 F10000
    SET_FILAMENT_SENSOR SENSOR=filament_present ENABLE=0                                 ; disable filament sensor
    SET_FILAMENT_SENSOR SENSOR=filament_moving ENABLE=0                                  ; disable filament sensor
    # Don't disable steppers to prevent Z sagging. X/Y will time out
    #M84
    RESTORE_MOTION_SETTINGS

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z_clearance = printer.toolhead.axis_maximum.z - printer.gcode_move.position.z - 0.1 %}
    {% set z_hop = [ params.Z|default(40)|int, z_clearance ] | min %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z_hop}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=resume_x VALUE={printer.gcode_move.position.x} ; store position to allow moving first XY and then Z back
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=resume_y VALUE={printer.gcode_move.position.y} ; store position to allow moving first XY and then Z back
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_present ENABLE=0                                 ; disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=filament_moving ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        G91                                                                              ; relative positioning
        G1 Z{z_hop} F900                                                                     ; raise Z up by z hop amount
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x-5} F6000                                        ; park toolhead on the right side
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    G90                                                                                  ; absolute positioning
    {% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings.extruder.min_extrude_temp %}
        G1 E-5 X{printer.toolhead.axis_maximum.x-5} F6000                                ; park toolhead on the right side and retract
    {% else %}
        G1 X{printer.toolhead.axis_maximum.x-5} F6000                                    ; park toolhead on the right side
    {% endif %}
    M104 S0                                                                              ; turn off hotend
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}          ; set timeout back to configured value
    SET_FILAMENT_SENSOR SENSOR=filament_present ENABLE=0                                 ; disable filament sensor
    SET_FILAMENT_SENSOR SENSOR=filament_moving ENABLE=0                                  ; disable filament sensor
    RESTORE_MOTION_SETTINGS
    BASE_CANCEL_PRINT

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
variable_resume_x: -100
variable_resume_y: -100
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_present ENABLE=1                         ; enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=filament_moving ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                 ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G90                                                                          ; absolute positioning
        G1 X{resume_x} Y{resume_y} F6000                                             ; move horizontally first to avoid collisions
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro RESTORE_MOTION_SETTINGS]
gcode:
    {% set max_speed_mm_s = printer.toolhead.max_velocity %}
    {% set max_speed_mm_min = max_speed_mm_s * 60 %}
    {% set max_accel_mm_s = printer.toolhead.max_accel %}
    M220 S100 # Reset Speed Factor
    M221 S100 # Reset Flow Rate Factor
    SET_VELOCITY_LIMIT VELOCITY={max_speed_mm_s} ACCEL={max_accel_mm_s}
    G0 F{max_speed_mm_min/2} # Set default move speed to sane value
    G1 F{max_speed_mm_min/2} # Set default move speed to sane value
    G90
    SET_GCODE_OFFSET X=0 Y=0 Z=0


    
[gcode_macro COLD_PULL]
gcode:
    _COLD_PULL TEMP={params.TEMP|default(80)|float} SPEED_SLOW={params.SPEED_SLOW|default(1)|float} SPEED_FAST={params.SPEED_FAST|default(15)|float}
    
[gcode_macro FORCE_UNLOAD]
gcode:
    _FORCE_UNLOAD TEMP={params.TEMP|default(80)|float} SPEED_SLOW={params.SPEED_SLOW|default(1)|float} SPEED_FAST={params.SPEED_FAST|default(15)|float}


[gcode_macro _PROBE_READ_LAST_QUERY]
variable_is_triggered: 0
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_READ_LAST_QUERY VARIABLE=is_triggered VALUE={printer.probe.last_query|int}

[gcode_macro _PROBE_RESET_IF_DEPLOYED]
gcode:
    {% if not printer['gcode_macro _PROBE_READ_LAST_QUERY'].is_triggered %}
      PROBE_DEPLOY
      G4 P400     ; Wait milliseconds
      PROBE_STOW
      G4 P400     ; Wait milliseconds
      PROBE_DEPLOY
      G4 P400     ; Wait milliseconds
      PROBE_STOW
      G4 P400     ; Wait milliseconds
      QUERY_PROBE
      _PROBE_READ_LAST_QUERY
      _PROBE_ABORT_IF_DEPLOYED
    {% endif %}

[gcode_macro _PROBE_ABORT_IF_DEPLOYED]
gcode:
    {% if not printer['gcode_macro _PROBE_READ_LAST_QUERY'].is_triggered %}
        M118 ERROR: Unable to retract probe, aborting.
        M112
    {% endif %}

[gcode_macro PROBE_ENSURE_STOWED]
gcode:
    G4 P200     ; Wait milliseconds
    QUERY_PROBE
    _PROBE_READ_LAST_QUERY
    _PROBE_RESET_IF_DEPLOYED

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE_ORIGINAL
gcode:
  _BED_MESH_CALIBRATE_ORIGINAL {rawparams}
  PROBE_ENSURE_STOWED

[gcode_macro G28]
rename_existing: G28000
gcode:
  G28000 {rawparams}
  PROBE_ENSURE_STOWED
  
[gcode_macro PROBE]
rename_existing: _PROBE_ORIGINAL
gcode:
  _PROBE_ORIGINAL {rawparams}
  PROBE_ENSURE_STOWED
  


[gcode_macro PROBE_POINT]
gcode:
    {% set X = params.X|default(110)|float %}
    {% set Y = params.Y|default(110)|float %}
    G1 F10000
    G1 Z10
    #G1 X{X - printer.configfile.settings.bltouch.x_offset} Y{Y - printer.configfile.settings.bltouch.y_offset}
    G1 X{X - printer.configfile.settings.probe.x_offset} Y{Y - printer.configfile.settings.probe.y_offset}
    PROBE PROBE_SPEED=2
    G1 Z10

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set EXTRUDER_TEMP = params.TEMP|default(220)|float %}
    
    SET_HEATER_TEMPERATURE  HEATER=extruder  TARGET={EXTRUDER_TEMP}
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    M83  ; extruder relative mode
    G90 ; move absolute mode
    {% if "x" not in printer.toolhead.homed_axes %}
    G28 X0
    {% endif %}
    G1 X{printer.toolhead.axis_minimum.x+5} F10000
    TEMPERATURE_WAIT  SENSOR=extruder MINIMUM={EXTRUDER_TEMP-10} MAXIMUM={EXTRUDER_TEMP+15}
    G1 E60 F200
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
    SET_HEATER_TEMPERATURE  HEATER=extruder  TARGET=0

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set EXTRUDER_TEMP = params.TEMP|default(220)|float %}

    SET_HEATER_TEMPERATURE  HEATER=extruder  TARGET={EXTRUDER_TEMP}
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    TEMPERATURE_WAIT  SENSOR=extruder MINIMUM={EXTRUDER_TEMP-10} MAXIMUM={EXTRUDER_TEMP+15}
    M83  ; extruder relative mode
    G90 ; move absolute mode
    {% if "x" not in printer.toolhead.homed_axes %}
    G28 X0
    {% endif %}
    G1 X{printer.toolhead.axis_minimum.x+5} F10000
    G1 E10 F60   ; extrude 10 mm in 10 seconds
    G1 E-20 F240  ; retract up to heatbreak in 5 seconds
    G1 E-27 F60   ; retract up through heatsink 27 seconds
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
    SET_HEATER_TEMPERATURE  HEATER=extruder  TARGET=0


[gcode_macro Z_TILT_CALCULATE]
variable_tilt: 0
variable_tilt_okay: 0
gcode:
    {% set quiet = params.QUIET|default(0)|float %}
    {% set left = printer["gcode_macro PROBE_SAVE_RESULT"].left|float %}
    {% set right = printer["gcode_macro PROBE_SAVE_RESULT"].right|float %}
    {% set tilt = right - left %}
    {% set threshold = printer["gcode_macro Z_TILT_ALIGN_CHECK_NECESSARY"].tilt_threshold|float %}
    SET_GCODE_VARIABLE MACRO=Z_TILT_CALCULATE VARIABLE=tilt VALUE={tilt}
    {% if tilt|abs > threshold %}
      SET_GCODE_VARIABLE MACRO=Z_TILT_CALCULATE VARIABLE=tilt_okay VALUE=0
      {% if not quiet %}
        MESSAGE TEXT="Tilt {"%.3f" | format(tilt)}: NOT OK"
      {% endif %}
    {% else %}
    SET_GCODE_VARIABLE MACRO=Z_TILT_CALCULATE VARIABLE=tilt_okay VALUE=1
      {% if not quiet %}
        MESSAGE TEXT="Tilt {"%.3f" | format(tilt)}: OK"
      {% endif %}
    {% endif %}

[gcode_macro PROBE_SAVE_RESULT]
variable_left: 0
variable_right: 0
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_SAVE_RESULT VARIABLE={params.VARIABLE} VALUE={printer.probe.last_z_result}

[gcode_macro Z_TILT_MEASURE]
gcode:
    {% set quiet = params.QUIET|default(0)|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    M117 Measuring Tilt
    PROBE_POINT X=20
    PROBE_SAVE_RESULT VARIABLE=left
    PROBE_POINT X=200
    PROBE_SAVE_RESULT VARIABLE=right
    Z_TILT_CALCULATE

[gcode_macro Z_TILT_ALIGN_IF_NECESSARY]
gcode:
    Z_TILT_MEASURE
    #Z_TILT_ALIGN_CANCEL_IF_BAD # TODO: remove line and uncomment the next when endstops are restored
    Z_TILT_ALIGN_CHECK_NECESSARY

[gcode_macro Z_TILT_ALIGN_CHECK_NECESSARY]
variable_tilt_threshold: 0.1
gcode:
    {% set tilt = printer["gcode_macro Z_TILT_CALCULATE"].tilt|float %}
    {% set tilt_okay = printer["gcode_macro Z_TILT_CALCULATE"].tilt_okay|int %}
    {% if tilt_okay %}
    M117 Tilt {"%.3f" | format(tilt)}, OK
    M118 Tilt {"%.3f" | format(tilt)}, OK
    {% else %}
    M117 Tilt {"%.3f" | format(tilt)}, aligning
    M118 Tilt {"%.3f" | format(tilt)}, aligning
    Z_TILT_FORCE_ALIGN
    Z_TILT_MEASURE
    Z_TILT_ALIGN_CANCEL_IF_BAD
    {% endif %}

[gcode_macro Z_TILT_ALIGN_CANCEL_IF_BAD]
gcode:
    {% set threshold = printer["gcode_macro Z_TILT_ALIGN_CHECK_NECESSARY"].tilt_threshold|float %}
    {% set tilt = printer["gcode_macro Z_TILT_CALCULATE"].tilt|float %}
    {% set tilt_okay = printer["gcode_macro Z_TILT_CALCULATE"].tilt_okay|int %}
    {% if not tilt_okay %}
    M117 Tilt {"%.3f > %.2f" | format(tilt, threshold)}, CANCEL
    M118 Tilt {"%.3f > %.2f" | format(tilt, threshold)}, CANCEL
    CANCEL_PRINT
    {% endif %}


# [gcode_macro M203] ;  Set max feedrate
# gcode:
#     {% set X = params.X|float %}
#     SET_VELOCITY_LIMIT VELOCITY={X}


# Accept marlins mesh calibrate gcode (e.g. for Linear Advance test pattern generator)
[gcode_macro G29]
gcode:
  BED_MESH_CALIBRATE

[gcode_macro M600]
gcode:
    {% set X = params.X|default(-20)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(5)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    G90
    G1 X{X} F3000
    G91
    RESTORE_GCODE_STATE NAME=M600_state

# M900 sets pressure advance in Marlin.
# The smaller values for Marlin 1.5 are compatible with Klipper.
# The old values are not, but PrusaSlicer sends both, so we ignore them.
[gcode_macro M900]
gcode:
  {% set K = params.K|default(0.0)|float %}
  {% if K < 1 %} # Use only sane values (Marlin pre-1.5 values are in the range 5-80)
  SET_PRESSURE_ADVANCE ADVANCE={K}
  {% endif %}



[printer]
kinematics: cartesian
max_velocity: 275
max_accel: 4500
max_z_velocity: 20
max_z_accel: 100

[idle_timeout]
gcode:
    TURN_OFF_HEATERS
    M107
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[stepper_x]
step_pin: gpio11
dir_pin: gpio10
enable_pin: !gpio12
endstop_pin: ^gpio4
rotation_distance: 32
full_steps_per_rotation: 200
microsteps: 64
# endstop_pin: tmc2209_stepper_x:virtual_endstop
# homing_retract_dist: 0
position_endstop: -21
position_max: 232.5
position_min: -21
homing_speed: 80

[tmc2209 stepper_x]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 0
sense_resistor: 0.11
run_current: 0.65
interpolate: false
#hold_current: 0.6
stealthchop_threshold: 999999
# diag_pin: ^gpio4
# driver_SGTHRS: 100

[stepper_y]
step_pin: gpio6
dir_pin: gpio5
enable_pin: !gpio7
endstop_pin: ^gpio3
rotation_distance: 32
full_steps_per_rotation: 200
microsteps: 64
# endstop_pin: tmc2209_stepper_y:virtual_endstop
# homing_retract_dist: 0
position_endstop: -9.5
position_min: -9.5
position_max: 222
homing_speed: 80

[tmc2209 stepper_y]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 2
sense_resistor: 0.11
run_current: 0.65
#hold_current: 0.6
interpolate: false
stealthchop_threshold: 999999
diag_pin: ^gpio3
driver_SGTHRS: 100

[stepper_z]
step_pin: gpio19
dir_pin: !gpio28
enable_pin: !gpio2
rotation_distance: 8
full_steps_per_rotation: 200
microsteps: 64
# endstop_pin: ^gpio25
# position_endstop: 0
endstop_pin: probe:z_virtual_endstop
position_min: -0.6
position_max: 240
homing_speed: 8
second_homing_speed: 8

[tmc2209 stepper_z]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 1
sense_resistor: 0.11
run_current: 0.580
#hold_current: 0.500
stealthchop_threshold: 999999
interpolate: false


[extruder]
#control: mpc
heater_power: 28  
cooling_fan: fan
filament_diameter: 1.75
filament_density: 1.25
filament_heat_capacity: 2.0

step_pin: gpio14
dir_pin: gpio13
enable_pin: !gpio15
microsteps: 16
rotation_distance: 8.19 # Hemera
full_steps_per_rotation: 200
filament_diameter: 1.750
max_extrude_only_velocity: 60 # Hemera
max_extrude_cross_section: 50000
max_extrude_only_distance: 250
nozzle_diameter: 0.400
pressure_advance: 0.015
heater_pin: gpio23
#sensor_type: ATC Semitec 104GT-2  # Anet A8
sensor_type: ATC Semitec 104NT-4-R025H42G   # Revo Hemera
sensor_pin: gpio27
#control: pid
#pid_Kp: 2.151492
#pid_Ki: 0.633897
#pid_Kd: 230.042965
min_temp: 0
max_temp: 300
min_extrude_temp: 170

[tmc2209 extruder]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 3
sense_resistor: 0.11
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 0

[verify_heater extruder]
max_error: 200 # defeault 120
hysteresis: 12

[filament_switch_sensor filament_present]
switch_pin: ^gpio1
pause_on_runout: False
runout_gcode:
 PAUSE # [pause_resume] is required in printer.cfg
 M117 Filament runout
insert_gcode:
 M117 Filament switch inserted
 
[filament_motion_sensor filament_moving]
switch_pin: ^gpio0
detection_length: 6.0 # accuracy of motion sensor 2.88mm
extruder: extruder
pause_on_runout: False
runout_gcode:
 PAUSE # [pause_resume] is required in printer.cfg
 M117 Filament error: not moving
insert_gcode:
 M117 Filament encoder inserted

[heater_bed]
heater_pin: gpio21
sensor_type: ATC Semitec 104GT-2
sensor_pin: gpio26
control: pid
#pid_Kp: 2.151492
#pid_Ki: 0.633897
#pid_Kd: 230.042965
min_temp: 0
max_temp: 130

[fan]
pin: gpio17

[heater_fan hotend_fan]
pin: gpio18
heater: extruder
heater_temp: 50.0

[mcu]
serial: /dev/serial/by-id/usb-Klipper_rp2040_454741505C0566FA-if00
restart_method: command

# [display]
# lcd_type: hd44780
# rs_pin: PA3
# e_pin: PA2
# d4_pin: PD2
# d5_pin: PD3
# d6_pin: PC0
# d7_pin: PC1

#[homing_override]
#gcode:
#   G28 X Y
#   G28 Z
#axes: z

[include moonraker_obico_macros.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# pid_kp = 32.808
#*# pid_ki = 4.050
#*# pid_kd = 66.436
#*# control = mpc
#*# block_heat_capacity = 5.80620
#*# sensor_responsiveness = 0.0960391
#*# ambient_transfer = 0.0292508
#*# fan_ambient_transfer = 0.0292508, 0.0414692, 0.0464983, 0.0515323, 0.0539439, 0.0569693, 0.05885
#*#
#*# [heater_bed]
#*# pid_kp = 70.240
#*# pid_ki = 1.410
#*# pid_kd = 874.487
#*#
#*# [bed_mesh default_60deg]
#*# version = 1
#*# points =
#*# 	-0.100000, -0.057500, 0.015000, 0.007500, 0.015000
#*# 	-0.090000, -0.080000, -0.037500, -0.082500, -0.095000
#*# 	-0.050000, -0.027500, 0.000000, -0.030000, -0.072500
#*# 	-0.042500, -0.060000, -0.045000, -0.075000, -0.085000
#*# 	0.070000, 0.050000, 0.037500, -0.017500, -0.040000
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 10.0
#*# max_x = 201.0
#*# min_y = 17.0
#*# max_y = 210.0
#*#
#*# [bed_mesh bltouch_default_60deg]
#*# version = 1
#*# points =
#*# 	-0.123468, -0.040968, 0.024032, 0.059032, 0.076532
#*# 	-0.133468, -0.083468, -0.028468, -0.020968, -0.003468
#*# 	-0.085968, -0.055968, -0.000968, 0.011532, 0.019032
#*# 	-0.068468, -0.053468, -0.030968, -0.025968, -0.018468
#*# 	0.029032, 0.049032, 0.059032, 0.044032, 0.039032
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 10.0
#*# max_x = 201.0
#*# min_y = 17.0
#*# max_y = 210.0
#*#
#*# [bed_mesh correction_values_60deg]
#*# version = 1
#*# points =
#*# 	0.117965, 0.082965, 0.027965, -0.047035, -0.062035
#*# 	0.095465, 0.087965, 0.037965, -0.032035, -0.062035
#*# 	0.055465, 0.052965, 0.005465, -0.074535, -0.104535
#*# 	0.055465, 0.057965, 0.022965, -0.049535, -0.074535
#*# 	0.007965, 0.020465, -0.034535, -0.094535, -0.107035
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 10.0
#*# max_x = 201.0
#*# min_y = 17.0
#*# max_y = 210.0
#*#
#*# [probe]
#*# z_offset = 0.860
#*#
#*# [bed_mesh pre_60deg]
#*# version = 1
#*# points =
#*# 	-0.060000, -0.047500, 0.002500, -0.007500, 0.017500
#*# 	-0.055000, -0.042500, -0.017500, -0.067500, -0.087500
#*# 	-0.045000, -0.017500, 0.000000, -0.035000, -0.072500
#*# 	-0.010000, -0.007500, -0.012500, -0.047500, -0.065000
#*# 	0.105000, 0.087500, 0.052500, -0.015000, -0.030000
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 10.0
#*# max_x = 210.0
#*# min_y = 10.0
#*# max_y = 210.0
#*#
#*# [bed_mesh post_60deg]
#*# version = 1
#*# points =
#*# 	0.040000, 0.010000, -0.012500, -0.015000, 0.002500
#*# 	0.035000, 0.037500, 0.020000, 0.015000, 0.007500
#*# 	0.005000, 0.010000, 0.000000, -0.005000, 0.000000
#*# 	0.032500, 0.052500, 0.032500, 0.027500, 0.020000
#*# 	0.035000, 0.037500, 0.015000, 0.002500, 0.010000
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 10.0
#*# max_x = 210.0
#*# min_y = 10.0
#*# max_y = 210.0
